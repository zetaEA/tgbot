from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import random
import asyncio


def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("–û–±–æ –º–Ω–µ", callback_data='about')],
        [InlineKeyboardButton("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data='projects')],
        [InlineKeyboardButton("–ú–æ–π —Å—Ç—ç–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π", callback_data='stack')],
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∏–∑–≤–∏—â–∏–µ", callback_data='get_ball')],
        [InlineKeyboardButton("–ü—Ä–æ—á–µ–µ", callback_data='more')],
        
    ]
    return InlineKeyboardMarkup(keyboard)

# /start
async def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, "–í–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç Zeta - –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! üòä")
    await context.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:", reply_markup=get_main_keyboard())
        
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'about':
        await query.message.reply_text("Name : Ernur\nAge : 17\nNick names : Zeta\nAbout me : Don't love JavaScript, I'm not friends with the frontend")
    elif query.data == 'projects':
        await query.message.reply_text("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã: \nTelegram-–±–æ—Ç—ã,\n–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Streamlit,\n–ë—ç–∫–µ–Ω–¥ (Django,Flask),\n–§–∏—à–∏–Ω–≥ —Å–∞–π—Ç(BackEnd), \n–†—É—Ç–∏–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, \nDDOS –∞—Ç–∞–∫–∞")
    elif query.data == 'stack':
        await query.message.reply_text("Python 3.12+ ,\nDjango,\nDRF,\nSQLite,\nAsyncio,\npython-telegram-bot,\nStreamlit,\nGitHub, \nBash, \nLinux, \nFlask")
    elif query.data == 'more':
        await query.message.reply_text("–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: \n1. –ö–∞–∫–æ–π —É —Ç–µ–±—è –ª—é–±–∏–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è? \n2. –ö–∞–∫–æ–π —É —Ç–µ–±—è –ª—é–±–∏–º—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫? \n3. –ö–∞–∫–æ–π —É —Ç–µ–±—è –ª—é–±–∏–º—ã–π –ø—Ä–æ–µ–∫—Ç? \n4. –ö–∞–∫–æ–π —É —Ç–µ–±—è –ª—é–±–∏–º—ã–π —Ö–æ–±–±–∏?")
    elif query.data == 'get_ball':
        await query.answer()  # –≠—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å callback
        await query.edit_message_text(random.choice(["–¢—ã ‚Äî –õ–æ—Ö ! ", "–¢—ã ‚Äî –ö—Ä–∞—Å–∞–≤–∞ !  ", "–¢—ã ‚Äî –ù–∏–≥–≥–µ—Ä ! "]))


    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def echo(update: Update, context: CallbackContext):
    text = update.message.text.lower()
    if text == '1':
        await update.message.reply_text("–£ –º–µ–Ω—è —Ç–æ–ª—å–∫–æ 1 —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏ —ç—Ç–æ Python!")
    elif text == '2':
        await update.message.reply_text("–ú–æ–π –ª—é–±–∏–º—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ ‚Äî Django!")
    elif text == '3':
        await update.message.reply_text("–ú–æ–π –ª—é–±–∏–º—ã–π –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ BackEnd —Å–∞–π—Ç–∞!")
    elif text == '4':
        await update.message.reply_text("–ú–æ–µ –ª—é–±–∏–º–æ–µ —Ö–æ–±–±–∏ ‚Äî —ç—Ç–æ –ø–∏—Å–∞—Ç—å –≤—Å—è–∫–∏–µ –≥–æ–≤–Ω–æ–∫–æ–¥—ã!")
    
import os

def main():
    TOKEN = "7203448075:AAEN5FI1dU7HraBMniOoqXex-AbYSYB8lu4"

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    hostname = os.environ.get("RENDER_EXTERNAL_HOSTNAME", "localhost:10000")

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", "10000")),
        url_path=TOKEN,
        webhook_url=f"https://{hostname}/{TOKEN}"
    )

if __name__ == '__main__':
    main()
    